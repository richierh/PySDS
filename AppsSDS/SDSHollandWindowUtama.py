"""Subclass of WindowUtama, which is generated by wxFormBuilder."""
import wx

import AppsSDS.sds as sds
from AppsSDS.TempListbox import TempListbox
from AppsSDS.simpan_data import SimpanData
import pathlib
from AppsSDS.lihat_nilai import LihatNilaiTes
from AppsSDS.controller.hitung_addlistbox import NewClass4, NewClass5
from AppsSDS.controller import Grafik1
from AppsSDS.warning import Warningid

class SDSHollandWindowUtama(sds.WindowUtama):
	"""Inherit from sds file and inheriting sds.WindowUtama"""
	
	
	def __init__(self, parent):
		sds.WindowUtama.__init__(self, parent)
		self.db_file=pathlib.Path.cwd()/"db/riasec.db"
		self.i=0
		print ("halaman 1")
		self.m_panelPage7.m_buttonBersihkan.Bind( wx.EVT_BUTTON, self.m_buttonBersihkanOnButtonClick )
		self.m_panelPage7.m_SimpanPage6.Bind( wx.EVT_BUTTON, self.m_SimpanPage6OnButtonClick )
		self.__properties()

		self.image1 = wx.Image(str(pathlib.Path.cwd()/'images/binakarir.png'))
		self.image2 = wx.Image(str(pathlib.Path.cwd()/'images/logosds.png'))
		self.re_image1 = self.image1.Rescale(317,103)
		self.re_image2 = self.image2.Rescale(350,350)
		self.m_bitmap3.SetBitmap(wx.Bitmap(self.re_image1))
		self.m_bitmap31.SetBitmap(wx.Bitmap(self.re_image2))
		self.Refresh()

		self.Layout()




	def __properties(self):
		self.m_panelPage7.m_statictextfromcircle1.SetLabel("___")
		self.m_panelPage7.m_staticfromcircle2.SetLabel("___")
		

		
		self.listmctrol = [
			self.m_panelPage7.m_listCtrl1,
			self.m_panelPage7.m_listCtrl2,
			self.m_panelPage7.m_listCtrl3,
			self.m_panelPage7.m_listCtrl4,
			self.m_panelPage7.m_listCtrl5,
			self.m_panelPage7.m_listCtrl6,
			self.m_panelPage7.m_listCtrl7,
			self.m_panelPage7.m_listCtrl8,
			self.m_panelPage7.m_listCtrl9,
			self.m_panelPage7.m_listCtrl10,
			self.m_panelPage7.m_listCtrl11,
			self.m_panelPage7.m_listCtrl12
			]

		
		self.listlabel = [
			self.m_panelPage7.m_staticA,
			self.m_panelPage7.m_staticA2,
			self.m_panelPage7.m_staticA3,
			self.m_panelPage7.m_staticA4,
			self.m_panelPage7.m_staticA5,
			self.m_panelPage7.m_staticA6,
			self.m_panelPage7.m_staticA7,
			self.m_panelPage7.m_staticA8,
			self.m_panelPage7.m_staticA9,
			self.m_panelPage7.m_staticA10,
			self.m_panelPage7.m_staticA11,
			self.m_panelPage7.m_staticA12	
			]
		self.index = 0
		for setval in self.listlabel :
			
			self.listlabel[self.index].SetLabel("___")
			self.index+=1

		self.index = 0
		for setval in self.listmctrol :
			self.listmctrol[self.index].InsertColumn(0,"___")
			self.listmctrol[self.index].SetLabel("___")
			self.index+=1		

		self.m_panelPage6.m_staticCR1.SetLabel("___")
		self.m_panelPage6.m_staticCR2.SetLabel("___")

		self.m_panelPage6.m_panelWarnaHasil.SetBackgroundColour(wx.Colour(219,227,37))
	
		self.m_panelPage6.m_stHasil1.SetBackgroundColour(wx.Colour( 73, 181, 73 ))

		self.nilai_RealisticA	  = self.m_panelPage3.m_RealisticA.GetValue()
		self.nilai_InvestigativeA = self.m_panelPage3.m_InvestigativeA.GetValue()
		self.nilai_ArtisticA	  = self.m_panelPage3.m_ArtisticA.GetValue()
		self.nilai_SocialA		  = self.m_panelPage3.m_SocialA.GetValue()
		self.nilai_EnterprisingA  = self.m_panelPage3.m_EnterprisingA.GetValue()
		self.nilai_ConventionalA  = self.m_panelPage3.m_ConventionalA.GetValue()

		self.nilai_RealisticK	 = self.m_panelPage3.m_RealisticK.GetValue()
		self.nilai_InvestigativeK = self.m_panelPage3.m_InvestigativeK.GetValue()
		self.nilai_ArtisticK	  = self.m_panelPage3.m_ArtisticK.GetValue()
		self.nilai_SocialK		= self.m_panelPage3.m_SocialK.GetValue()
		self.nilai_EnterprisingK  = self.m_panelPage3.m_EnterprisingK.GetValue()
		self.nilai_ConventionalK  = self.m_panelPage3.m_ConventionalK.GetValue()
		
		self.nilai_RealisticP	 = self.m_panelPage3.m_RealisticP.GetValue()
		self.nilai_InvestigativeP = self.m_panelPage3.m_InvestigativeP.GetValue()
		self.nilai_ArtisticP	  = self.m_panelPage3.m_ArtisticP.GetValue()
		self.nilai_SocialP		= self.m_panelPage3.m_SocialP.GetValue()
		self.nilai_EnterprisingP  = self.m_panelPage3.m_EnterprisingP.GetValue()
		self.nilai_ConventionalP  = self.m_panelPage3.m_ConventionalP.GetValue()		
	
		self.nilai_Kmekanisb1	 = self.m_panelPage4.m_kmekanisb1.GetValue()
		self.nilai_Kilmiahb1	  = self.m_panelPage4.m_kilmiahb1.GetValue()
		self.nilai_Kartistikb1	  = self.m_panelPage4.m_kartistikb1.GetValue()
		self.nilai_Kmengajarb1	= self.m_panelPage4.m_kmengajarb1.GetValue()
		self.nilai_Kpenjualan	  = self.m_panelPage4.m_kpenjualanb1.GetValue()
		self.nilai_Kadministrasib1= self.m_panelPage4.m_kadministrasib1.GetValue()		
		
		self.nilai_Ktanganb2	  = self.m_panelPage4.m_ktanganb2.GetValue()
		self.nilai_Kmatematikab2  = self.m_panelPage4.m_kmatematikab2.GetValue()
		self.nilai_Kmusikb2 	  = self.m_panelPage4.m_kmusikb2.GetValue()
		self.nilai_Moranglain	  = self.m_panelPage4.m_moranglainb2.GetValue()
		self.nilai_Kmanajerial	  = self.m_panelPage4.m_kmanajerialb2.GetValue()
		self.nilai_Kperkantoran	  = self.m_panelPage4.m_kperkantoranb2.GetValue()	
		pass
					
	def openlistbox1OnButtonClick( self, event ):
		print("tes 1")
		self.op_tomb = 1

		self.runList = TempListbox(self)
		self.runList.Show()
		
		event.Skip()
		
	def openlistbox1OnEnterWindow(self,event):

		tooltip = "cari jenis pekerjaan disini"
		event.GetEventObject().SetToolTip(tooltip)
		event.Skip()
		
	def openlistbox2OnEnterWindow(self,event):

		tooltip = "cari jenis pekerjaan disini"
		event.GetEventObject().SetToolTip(tooltip)
		event.Skip()
		
	def openlistbox3OnEnterWindow(self,event):

		tooltip = "cari jenis pekerjaan disini"
		event.GetEventObject().SetToolTip(tooltip)
		event.Skip()

	def openlistbox4OnEnterWindow(self,event):

		tooltip = "cari jenis pekerjaan disini"
		event.GetEventObject().SetToolTip(tooltip)
		event.Skip()

	def openlistbox5OnEnterWindow(self,event):

		tooltip = "cari jenis pekerjaan disini"
		event.GetEventObject().SetToolTip(tooltip)
		event.Skip()
		
	def openlistbox6OnEnterWindow(self,event):

		tooltip = "cari jenis pekerjaan disini"
		event.GetEventObject().SetToolTip(tooltip)
		event.Skip()

	def textctrl1OnEnterWindow(self,event ):
		tooltip = "Untuk mengisi form ini silahkan klik cari"
		event.GetEventObject().SetToolTip(tooltip)
		event.Skip()


	def textctrl2OnEnterWindow(self,event):

		tooltip = "Untuk mengisi form ini silahkan klik cari"
		event.GetEventObject().SetToolTip(tooltip)
		event.Skip()

	def textctrl3OnEnterWindow(self,event):

	
		tooltip = "Untuk mengisi form ini silahkan klik cari"
		event.GetEventObject().SetToolTip(tooltip)
		event.Skip()

	def textctrl4OnEnterWindow(self,event):

		tooltip = "Untuk mengisi form ini silahkan klik cari"
		event.GetEventObject().SetToolTip(tooltip)
		event.Skip()

	def textctrl5OnEnterWindow(self,event):
	
		tooltip = "Untuk mengisi form ini silahkan klik cari"
		event.GetEventObject().SetToolTip(tooltip)
		event.Skip()

	def textctrl6OnEnterWindow(self,event):

		tooltip = "Untuk mengisi form ini silahkan klik cari"
		event.GetEventObject().SetToolTip(tooltip)
		event.Skip()


	def openlistbox2OnButtonClick( self, event ):
		print("tes2")
		self.op_tomb = 2

		self.runList = TempListbox(self)
		self.runList.Show()
		event.Skip()


	def openlistbox3OnButtonClick( self, event ):
		print("tes3")

		self.op_tomb = 3

		self.runList = TempListbox(self)
		self.runList.Show()
		event.Skip()

	def openlistbox4OnButtonClick( self, event ):
		print("tes4")
		self.op_tomb = 4
		self.runList = TempListbox(self)
		self.runList.Show()
		event.Skip()

	def openlistbox5OnButtonClick( self, event ):
		print("tes5")
		self.op_tomb = 5

		self.runList = TempListbox(self)
		self.runList.Show()
		event.Skip()
	
	def openlistbox6OnButtonClick( self, event ):
		print("tes6")
		self.op_tomb = 6
		self.runList = TempListbox(self)
		self.runList.Show()
		event.Skip()
		
	def textctrl1OnText(self,event):
		try:
			self.a1 = self.m_panelPage2.textctrl1.GetValue()
			# print (self.a1)
			from AppsSDS.db import db
			self.of_1 = db.QueryList()
			self.b1,self.b2 = self.of_1.CheckQuery(self.a1,None)
	# 		self.b1=self.m_panelPage2.listprofesiona.get(self.a1)
	#		print (self.listprofesiona.get(self.a1))
	# 		print (self.b1.get(self.a1))
			self.b1 = self.b1.get(self.a1)
			self.m_panelPage2.label1.SetLabel(self.b1)
		except :
			self.m_panelPage2.label1.SetLabel("")
		self.Layout()
		pass
	

	
	def label1OnEnterWindow(self,event):
		print ("hjhahasdf")
		pass

	def textctrl2OnText(self,event):
		try:
			self.a2 = self.m_panelPage2.textctrl2.GetValue()
			
			from AppsSDS.db import db
			self.of_1 = db.QueryList()
			self.b1,self.b2 = self.of_1.CheckQuery(self.a2,None)
			self.b1=self.b1.get(self.a2)
			self.m_panelPage2.label2.SetLabel(self.b1)
		except :
			self.m_panelPage2.label2.SetLabel("")
		self.Layout()
		pass
	
	def textctrl3OnText(self,event):
		try:
			self.a3 = self.m_panelPage2.textctrl3.GetValue()
			print ("hello world")
			from AppsSDS.db import db
			self.of_1 = db.QueryList()
			self.b1,self.b2 = self.of_1.CheckQuery(self.a3,None)
			self.b1=self.b1.get(self.a3)
			self.m_panelPage2.label3.SetLabel(self.b1)
		except :
			self.m_panelPage2.label3.SetLabel("")		
		self.Layout()
		pass
	
	def textctrl4OnText(self,event):
		try:
			self.a4 = self.m_panelPage2.textctrl4.GetValue()
			from AppsSDS.db import db
			self.of_1 = db.QueryList()
			self.b1,self.b2 = self.of_1.CheckQuery(self.a4,None)
			self.b1=self.b1.get(self.a4)
			self.m_panelPage2.label4.SetLabel(self.b1)
		except :
			self.m_panelPage2.label4.SetLabel("")
		self.Layout()
		pass
	
	def textctrl5OnText(self,event):
		try:
			self.a5 = self.m_panelPage2.textctrl5.GetValue()
			from AppsSDS.db import db
			self.of_1 = db.QueryList()
			self.b1,self.b2 = self.of_1.CheckQuery(self.a5,None)
			self.b1=self.b1.get(self.a5)
			self.m_panelPage2.label5.SetLabel(self.b1)
		except :
			self.m_panelPage2.label5.SetLabel("")
		self.Layout()
		pass
	
	def textctrl6OnText(self,event):
		try :
			self.a6 = self.m_panelPage2.textctrl6.GetValue()
			from AppsSDS.db import db
			self.of_1 = db.QueryList()
			self.b1,self.b2 = self.of_1.CheckQuery(self.a6,None)
			self.b1=self.b1.get(self.a6)
			self.m_panelPage2.label6.SetLabel(self.b1)
		except :
			self.m_panelPage2.label6.SetLabel("")
		self.Layout()
		pass

	def m_tampilgrafikOnButtonClick(self,event):
		print("working")
# 		print (self.m_panelPage5.m_plota.Show())
# 		print (self.m_panelPage5.m_plotb.Show())

		if self.m_panelPage5.m_plota.IsShown()==True:
			self.m_panelPage5.m_plotb.Show()
			self.m_panelPage5.m_plota.Hide()
			print ("plota tersembunyi")
 		
		elif self.m_panelPage5.m_plotb.IsShown()==True:
			print ("plotb tersembunyi")
			self.m_panelPage5.m_plota.Show()
			self.m_panelPage5.m_plotb.Hide()
		else :
			print ("error")
 		
		self.Refresh()
		self.Layout()
		
		pass		
		
		
		
# 		print("working a")

	def m_tombolHitungOnButtonClick(self,event):
		self.__properties()
		from AppsSDS.controller import NewClass,NewClass2,NewClass3

################################################################################################
		self.lbA = NewClass(self)
		self.lbA.resultlistbox()
		
################################################################################################
		self.lbP = NewClass2(self)
		self.lbP.resultlistbox()

################################################################################################
		self.lbk = NewClass3(self)
		self.lbk.resultlistbox()
		
################################################################################################
		self.lbpd1 = NewClass4(self)
		self.lbpd1.resultlistbox()
	
################################################################################################
		self.lbpd2 = NewClass5(self)
		self.lbpd2.resultlistbox()	

################################################################################################
	
		self.nilaiRA = self.m_panelPage3.m_RealisticA.GetValue()
		self.nilaiRK = self.m_panelPage3.m_RealisticK.GetValue()
		self.nilaiRP = self.m_panelPage3.m_RealisticP.GetValue()
		self.nilaiRPDB1 = self.m_panelPage4.m_kmekanisb1.GetValue()
		self.nilaiRPDB2 = self.m_panelPage4.m_ktanganb2.GetValue()
		
		self.sumscoresR = self.nilaiRA+self.nilaiRK+\
						  self.nilaiRP+self.nilaiRPDB1+self.nilaiRPDB2
		
		
		self.nilaiIA = self.m_panelPage3.m_InvestigativeA.GetValue()
		self.nilaiIK = self.m_panelPage3.m_InvestigativeK.GetValue()
		self.nilaiIP = self.m_panelPage3.m_InvestigativeP.GetValue()
		self.nilaiIPDB1 = self.m_panelPage4.m_kilmiahb1.GetValue()
		self.nilaiIPDB2 = self.m_panelPage4.m_kmatematikab2.GetValue()
		
		self.sumscoresI = self.nilaiIA + self.nilaiIK+\
						  self.nilaiIP +self.nilaiIPDB1+self.nilaiIPDB2
		
		self.nilaiAA = self.m_panelPage3.m_ArtisticA.GetValue()
		self.nilaiAK = self.m_panelPage3.m_ArtisticK.GetValue()
		self.nilaiAP = self.m_panelPage3.m_ArtisticP.GetValue()
		self.nilaiAPDB1 = self.m_panelPage4.m_kartistikb1.GetValue()
		self.nilaiAPDB2 = self.m_panelPage4.m_kmusikb2.GetValue()
		
		self.sumscoresA = self.nilaiAA + self.nilaiAK+\
						  self.nilaiAP + self.nilaiAPDB1 + self.nilaiAPDB2
			
		self.nilaiSA = self.m_panelPage3.m_SocialA.GetValue()
		self.nilaiSK = self.m_panelPage3.m_SocialK.GetValue()
		self.nilaiSP = self.m_panelPage3.m_SocialP.GetValue()
		self.nilaiSPDB1 = self.m_panelPage4.m_kmengajarb1.GetValue()
		self.nilaiSPDB2 = self.m_panelPage4.m_moranglainb2.GetValue()
		
		self.sumscoresS = self.nilaiSA + self.nilaiSK + \
						  self.nilaiSP + self.nilaiSPDB1 + self.nilaiSPDB2
		
		self.nilaiEA = self.m_panelPage3.m_EnterprisingA.GetValue()
		self.nilaiEK = self.m_panelPage3.m_EnterprisingK.GetValue()
		self.nilaiEP = self.m_panelPage3.m_EnterprisingP.GetValue()
		self.nilaiEPDB1 = self.m_panelPage4.m_kpenjualanb1.GetValue()
		self.nilaiEPDB2 = self.m_panelPage4.m_kmanajerialb2.GetValue()
		
		self.sumscoresE = self.nilaiEA + self.nilaiEK + \
						  self.nilaiEP + self.nilaiEPDB1 + self.nilaiEPDB2
		
		self.nilaiCA = self.m_panelPage3.m_ConventionalA.GetValue()
		self.nilaiCK = self.m_panelPage3.m_ConventionalK.GetValue()
		self.nilaiCP = self.m_panelPage3.m_ConventionalP.GetValue()
		self.nilaiCPDB1 = self.m_panelPage4.m_kadministrasib1.GetValue()
		self.nilaiCPDB2 = self.m_panelPage4.m_kperkantoranb2.GetValue()
		
		self.sumscoresC = self.nilaiCA + self.nilaiCK + \
						  self.nilaiCP + self.nilaiCPDB1 + self.nilaiCPDB2
		
		self.listsum = ("R  =  {}".format(self.sumscoresR),
						"I  =  {}".format(self.sumscoresI),
						"A  =  {}".format(self.sumscoresA),
						"S  =  {}".format(self.sumscoresS),
						"E  =  {}".format(self.sumscoresE),
						"C  =  {}".format(self.sumscoresC)
						)
	
		if not self.m_panelPage5.m_lbsummaryscores.GetCount()>0 : 
# 			print("hh")			
			pass
		
		else :
			for index in range(0,6):
# 				print (index)
				self.m_panelPage5.m_lbsummaryscores.Delete(0)		
		
		self.m_panelPage5.m_lbsummaryscores.InsertItems(self.listsum,0)

#############################################################
# menampilkan grafik 
		self.grafik = Grafik1(self)

######################################
# 		Mencari nilai RIASEC 	
		from AppsSDS.controller.controlvalue import CircleValue
		self.RIASEC = {
						"R" : self.sumscoresR,
						"I" : self.sumscoresI,
						"A" : self.sumscoresA,
						"S"	: self.sumscoresS,
						"E"	: self.sumscoresE,
						"C" : self.sumscoresC
					   }
		try :
			self.appCircle = CircleValue(**self.RIASEC)

			self.HasilHitung,self.HasilHitung2,self.ListHasilHitungS = self.appCircle.hasilhitung()
		except :
			
			pass
		try:
			self.riasec0 = []
			self.riasec1 = []
			for self.ListHasilHitung in self.ListHasilHitungS:
				self.riasec0.append(self.ListHasilHitung[0])
				self.riasec1.append(str(self.ListHasilHitung[1]))
			
			if self.riasec0 == ["N"] or self.riasec0==["None"]:
				self.riasec0.remove("N")
				self.riasec0.append("Anda belum Meng-Klik Hitung")

# 			print ("".join(self.riasec0))
# 			print ("".join(self.riasec1))

		except:
			self.result0="None"
			self.result1="None"
		
			pass
		self.result0="".join(self.riasec0)
		self.result1="".join(self.riasec1)
		self.riasec = [self.result0]#,self.result1]

		self.m_panelPage6.m_stHasil1.SetLabel(self.riasec[0])
		
		from AppsSDS.controller.sequence import CalculationRIASEC
		self.dataA = {
						"R" : self.nilai_RealisticA,	  
						"I" : self.nilai_InvestigativeA,
						"A" : self.nilai_ArtisticA,
						"S" : self.nilai_SocialA,		 
						"E" : self.nilai_EnterprisingA,
						"C" : self.nilai_ConventionalA 
					}
		self.dataK = {
						"R" : self.nilai_RealisticK,	  
						"I" : self.nilai_InvestigativeK,
						"A" : self.nilai_ArtisticK,
						"S" : self.nilai_SocialK,		 
						"E" : self.nilai_EnterprisingK,
						"C" : self.nilai_ConventionalK 
					}
		self.dataP = {
						"R" : self.nilai_RealisticK,	  
						"I" : self.nilai_InvestigativeK,
						"A" : self.nilai_ArtisticK,
						"S" : self.nilai_SocialK,		 
						"E" : self.nilai_EnterprisingK,
						"C" : self.nilai_ConventionalK 
					}
		self.dataPD = {
				"R" : self.nilai_Kmekanisb1,	  
				"I" : self.nilai_Kilmiahb1,
				"A" : self.nilai_Kartistikb1,
				"S" : self.nilai_Kmengajarb1,		 
				"E" : self.nilai_Kpenjualan,
				"C" : self.nilai_Kadministrasib1 
				}
		self.dataPD2 = {
				"R" : self.nilai_Ktanganb2,	  
				"I" : self.nilai_Kmatematikab2,
				"A" : self.nilai_Kmusikb2,
				"S" : self.nilai_Moranglain,		 
				"E" : self.nilai_Kmanajerial,
				"C" : self.nilai_Kperkantoran 
				}

		self.riasecpersubA = CalculationRIASEC(**self.dataA)
		self.riasecpersubK = CalculationRIASEC(**self.dataK)
		self.riasecpersubP = CalculationRIASEC(**self.dataP)
		self.riasecpersubPD = CalculationRIASEC(**self.dataPD)
		self.riasecpersubPD2 = CalculationRIASEC(**self.dataPD2)

		self.riasecpersubA.SortRIASEC()
		self.riasecpersubK.SortRIASEC()
		self.riasecpersubP.SortRIASEC()
		self.riasecpersubPD.SortRIASEC()
		self.riasecpersubPD2.SortRIASEC()
	
		self.hasil_RIASECperSubA = self.riasecpersubA.SortRIASEC()
		self.hasil_RIASECperSubK = self.riasecpersubK.SortRIASEC()
		self.hasil_RIASECperSubP = self.riasecpersubP.SortRIASEC()
		self.hasil_RIASECperSubPD = self.riasecpersubPD.SortRIASEC()
		self.hasil_RIASECperSubPD2 = self.riasecpersubPD2.SortRIASEC()
		
		#########################################
		
		self.HasilCircle1 = []
		self.HasilCircle2 = []
		for listcircle1 in self.HasilHitung:
			self.HasilCircle1.append(listcircle1[0])
		
		for listcircle2 in self.HasilHitung2:
			self.HasilCircle2.append(listcircle2[0])
			
		print(self.HasilCircle1)
		print(self.HasilCircle2)
		self.LabelCircle1 = "".join(self.HasilCircle1)
		self.LabelCircle2 = "".join(self.HasilCircle2)	

		print (self.LabelCircle1)
		print (self.LabelCircle2)
		
		if self.LabelCircle1 == "None" and self.LabelCircle2 == "None":
			self.LabelCircle1 = "___"
			self.LabelCircle2 = "___"
			print ("ini")
		elif self.LabelCircle1 == "None" :
			self.LabelCircle1 = "___"
			print ("itu")
		elif self.LabelCircle2 == "N":
			self.LabelCircle2 = "___"
			print ("atau ini")
		else :
			pass
		
		try :
			from AppsSDS.db.db import QueryList
			self.listofjob = QueryList()
			self.x,self.HasilListJob=self.listofjob.CheckQuery(None, self.LabelCircle1)
			self.x,self.HasilListJob2=self.listofjob.CheckQuery(None, self.LabelCircle2)
		except :
			pass
		print (self.HasilListJob)
		print (self.HasilListJob2)
		try :
			if self.appCircle.nn() == 11:
				self.warning = Warningid(self)
				self.warning.Show()
		except :
			pass
	
		
		self.m_panelPage6.m_listCtrlCR1.DeleteAllItems()
		self.m_panelPage6.m_listCtrlCR2.DeleteAllItems()
		self.m_panelPage7.m_listCtrl1.DeleteAllItems()
		self.m_panelPage7.m_listCtrl2.DeleteAllItems()
		self.m_panelPage7.m_listCtrl3.DeleteAllItems()
		self.m_panelPage7.m_listCtrl4.DeleteAllItems()
		self.m_panelPage7.m_listCtrl5.DeleteAllItems()
		self.m_panelPage7.m_listCtrl6.DeleteAllItems()
		self.m_panelPage7.m_listCtrl7.DeleteAllItems()
		
		
		self.m_panelPage7.m_listCtrl8.DeleteAllItems()
		self.m_panelPage7.m_listCtrl9.DeleteAllItems()
		self.m_panelPage7.m_listCtrl10.DeleteAllItems()
		self.m_panelPage7.m_listCtrl11.DeleteAllItems()
		self.m_panelPage7.m_listCtrl12.DeleteAllItems()
		
		
		print (self.HasilListJob.keys())
		print (self.HasilListJob2.keys())
		self.m_panelPage6.m_listCtrlCR1.InsertColumn(0,self.LabelCircle1,width = 300)
		self.m_panelPage6.m_listCtrlCR2.InsertColumn(0,self.LabelCircle2,width = 300)

		self.index = 0
		for Joblist in self.HasilListJob.keys():
			self.m_panelPage6.m_listCtrlCR1.InsertItem(self.index,Joblist)
			self.index+=1

		self.index2 = 0
		for Joblist2 in self.HasilListJob2.keys():
			self.m_panelPage6.m_listCtrlCR2.InsertItem(self.index2,Joblist2)
			print (Joblist2)
			self.index2+=1

		self.m_panelPage6.m_staticCR1.SetLabel(self.LabelCircle1)
		self.m_panelPage6.m_staticCR2.SetLabel(self.LabelCircle2)

		from AppsSDS.controller.permutation import CustomPermutation
		self.m_panelPage7.m_statictextfromcircle1.SetLabel(self.LabelCircle1)
		self.m_panelPage7.m_staticfromcircle2.SetLabel(self.LabelCircle2)

		runcircle1 = CustomPermutation(self.LabelCircle1)
		self.runcircle1 = runcircle1.readpermutation()[0]
		runcircle2 = CustomPermutation(self.LabelCircle2)
		self.runcircle2 = runcircle2.readpermutation()[0]

		
		j = 0
		self.indexpage7l =0

		for setlbl in self.runcircle1:
			self.indexpage7 =0

			if j == 6:
				break
			self.listmctrol[self.indexpage7l].InsertColumn(0,setlbl,width = 300)
		
			self.listlabel[j].SetLabel(setlbl)
			
			self.x,self.hasil1=self.listofjob.CheckQuery(None,setlbl)
# 			print (self.hasil1.keys())			
				
			for listjob in self.hasil1.keys():
			
				self.listmctrol[self.indexpage7l].InsertItem(self.indexpage7,listjob)
				self.indexpage7+=1
			self.indexpage7l+=1
			j+=1
		self.indexpage7+=1

		k = 6
		self.indexpage7lk=6
		for setlbl in self.runcircle2:
			self.indexpage7a=0
			if k==12:
				break
			self.listmctrol[self.indexpage7lk].InsertColumn(0,setlbl,width = 300)
			
			self.listlabel[k].SetLabel(setlbl)
			self.x,self.hasil2=self.listofjob.CheckQuery(None,setlbl)
# 			print (self.hasil2.keys())			
				
			for listjob in self.hasil2.keys():
				self.listmctrol[self.indexpage7lk].InsertItem(self.indexpage7a,listjob)
				self.indexpage7a+=1
			self.indexpage7lk+=1
		
			k+=1

		
	def btn_kembaliawal(self, event):
		from AppsSDS import Halaman1m
		self.bukahalaman1 = Halaman1m(self)
# 		print ("berapa")
		pass
	
	def m_grafikpropertiesOnButtonClick(self,event):
# 		print ("grafik properties")
		import matplotlib.pyplot as plt
		
		self.sumbux = ("R","I","A","S","E","C")
		
# 		self.m_tombolHitungOnButtonClick(self)
		self.__properties()
		self.sumbuySumscores = (self.sumscoresR,self.sumscoresI,self.sumscoresA,self.sumscoresS,self.sumscoresE,self.sumscoresC)
# 		self.sumbuyAktivitas = (self.nilai_RealisticA,self.nilai_InvestigativeA,self.nilai_ArtisticA,self.nilai_SocialA,\
# 								self.nilai_EnterprisingA,self.nilai_ConventionalA)

		self.plt = plt
		self.linesSumscores = self.plt.plot(self.sumbux,self.sumbuySumscores)
# 		self.linesAktivitas = self.plt.plot(self.sumbux,self.sumbuyAktivitas)
		
		self.plt.setp(self.linesSumscores,color ="red")
# 		self.plt.setp(self.linesAktivitas,color ="blue")
		
		
		self.plt.xlabel(xlabel = "Summary Scores")
		self.plt.show()
		
		pass
	
	def m_buttonLihatDataBulanIniOnButtonClick(self,event):
		print ("filter on this month")
		import datetime
		from AppsSDS.db import db

		db_file = db.pathdb()
		try :
			print (db_file)
			self.nama_orang = None
			self.date_from = "{}/{}/01".format(datetime.datetime.now().strftime('%Y'),datetime.datetime.now().strftime('%m'))
			self.date_end= "{}/{}/31".format(datetime.datetime.now().strftime('%Y'),datetime.datetime.now().strftime('%m'))
			self.no_tes=None
			self.datpes.m_ListDataPeserta.DeleteAllItems()
			self.dbdatpes = db.querydb(str(db_file), self.nama_orang, self.date_from, self.date_end,self.no_tes)[1]
			print (self.date_from)
			print (self.date_end)
			print (self.dbdatpes)
			print (len(self.dbdatpes))
			index = 0
			for index in range(len(self.dbdatpes)):
				self.index = self.datpes.m_ListDataPeserta.InsertItem(0,"{}".format(len(self.dbdatpes)-index))
				self.datpes.m_ListDataPeserta.SetItem(self.index,1,self.dbdatpes[index][0])
				self.datpes.m_ListDataPeserta.SetItem(self.index,2,self.dbdatpes[index][1])
				self.datpes.m_ListDataPeserta.SetItem(self.index,3,self.dbdatpes[index][2])
				self.datpes.m_ListDataPeserta.SetItem(self.index,4,self.dbdatpes[index][3])
				self.datpes.m_ListDataPeserta.SetItem(self.index,5,self.dbdatpes[index][8])
				self.datpes.m_ListDataPeserta.SetItem(self.index,6,self.dbdatpes[index][9])
				self.datpes.m_ListDataPeserta.SetItem(self.index,7,str(self.dbdatpes[index][46]))
				index+=1
		except :
			pass
		
		try :
			print (db_file)
			self.nama_orang = None
			self.date_from = "{}/{}/01".format(datetime.datetime.now().strftime('%Y'),datetime.datetime.now().strftime('%m'))
			self.date_end= "{}/{}/31".format(datetime.datetime.now().strftime('%Y'),datetime.datetime.now().strftime('%m'))
			self.no_tes=None
			self.buka_peserta_tes.m_ListDataPeserta.DeleteAllItems()
			self.database_peserta_tes =db.querydbtes(str(db_file), self.nama_orang, self.date_from, self.date_end)[1]
			index = 0
			print (self.database_peserta_tes)
			for self.index in range(len(self.database_peserta_tes)):
				self.index = self.buka_peserta_tes.m_ListDataPeserta.InsertItem(0,"{}".format(len(self.database_peserta_tes)-index))
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,1,self.database_peserta_tes[index][0])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,2,self.database_peserta_tes[index][1])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,3,self.database_peserta_tes[index][2])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,4,self.database_peserta_tes[index][4])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,5,self.database_peserta_tes[index][6])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,6,self.database_peserta_tes[index][7])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,7,str(self.database_peserta_tes[index][49]))
				
				index+=1
				
		except:
			pass
	
		pass
	
	def m_buttonFilterBatalOnButtonClick(self,events):
		print ("Close Filter Window")
		self.BukaWindowFilter.Close()
		pass
	
	def m_buttonKlikFilterTanggalOnButtonClick(self,events):
		from AppsSDS.db import db
		print ("Filtering base on Date")

		try :
			self.date_from = self.BukaWindowFilter.m_datePickerdaritgl.GetValue().Format("%Y/%m/%d")
			self.date_end= self.BukaWindowFilter.m_datePickersampaitgl.GetValue().Format("%Y/%m/%d")
			print (self.BukaWindowFilter.m_datePickerdaritgl.GetValue().Format("%Y/%m/%d"),\
			self.BukaWindowFilter.m_datePickersampaitgl.GetValue().Format("%Y/%m/%d"))
			self.no_tes=None
			self.datpes.m_ListDataPeserta.DeleteAllItems()
	
			db_file = db.pathdb()
			self.nama_orang = ""
			self.dbdatpes = db.querydb(str(db_file), self.nama_orang, self.date_from, self.date_end,self.no_tes)[1]
	# 		print (self.dbdatpes[5][46])
			index = 0
			for index in range(len(self.dbdatpes)):
				self.index = self.datpes.m_ListDataPeserta.InsertItem(0,"{}".format(len(self.dbdatpes)-index))
				self.datpes.m_ListDataPeserta.SetItem(self.index,1,self.dbdatpes[index][0])
				self.datpes.m_ListDataPeserta.SetItem(self.index,2,self.dbdatpes[index][1])
				self.datpes.m_ListDataPeserta.SetItem(self.index,3,self.dbdatpes[index][2])
				self.datpes.m_ListDataPeserta.SetItem(self.index,4,self.dbdatpes[index][3])
				self.datpes.m_ListDataPeserta.SetItem(self.index,5,self.dbdatpes[index][8])
				self.datpes.m_ListDataPeserta.SetItem(self.index,6,self.dbdatpes[index][9])
				self.datpes.m_ListDataPeserta.SetItem(self.index,7,str(self.dbdatpes[index][46]))
	 			
				index+=1
		except:
			pass
		
		try :
			self.buka_peserta_tes.m_ListDataPeserta.DeleteAllItems()
			self.date_from = self.BukaWindowFilter.m_datePickerdaritgl.GetValue().Format("%Y/%m/%d")
			self.date_end= self.BukaWindowFilter.m_datePickersampaitgl.GetValue().Format("%Y/%m/%d")
			print (self.BukaWindowFilter.m_datePickerdaritgl.GetValue().Format("%Y/%m/%d"),\
			self.BukaWindowFilter.m_datePickersampaitgl.GetValue().Format("%Y/%m/%d"))
			self.nama_orang=None
			self.database_peserta_tes = db.querydbtes(str(self.db_file), self.nama_orang, self.date_from, self.date_end)[1]
			index = 0
			print (self.database_peserta_tes)
			for self.index in range(len(self.database_peserta_tes)):
				self.index = self.buka_peserta_tes.m_ListDataPeserta.InsertItem(0,"{}".format(len(self.database_peserta_tes)-index))
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,1,self.database_peserta_tes[index][0])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,2,self.database_peserta_tes[index][1])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,3,self.database_peserta_tes[index][2])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,4,self.database_peserta_tes[index][4])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,5,self.database_peserta_tes[index][6])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,6,self.database_peserta_tes[index][7])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,7,str(self.database_peserta_tes[index][49]))
				
				index+=1
				
		except :
			print ("pass")
			pass
 			
	
		pass
	
	def m_buttonKlikFilterOrangOnButtonClick(self,events):
		print ("Filtering based on Name Person")

		from AppsSDS.db import db

		try :
			self.datpes.m_ListDataPeserta.DeleteAllItems()
			self.nama_orang = str(self.BukaWindowFilter.m_textCtrlnamaorang.GetValue())
			db_file = db.pathdb()
			self.date_from=None
			self.date_end=None
			self.no_tes=None
			print (self.nama_orang)
			self.dbdatpes = db.querydb(str(db_file), self.nama_orang, self.date_from, self.date_end,self.no_tes)[0]
			print (self.dbdatpes)
			index = 0
			for index in range(len(self.dbdatpes)):
				self.index = self.datpes.m_ListDataPeserta.InsertItem(0,"{}".format(len(self.dbdatpes)-index))
				self.datpes.m_ListDataPeserta.SetItem(self.index,1,self.dbdatpes[index][0])
				self.datpes.m_ListDataPeserta.SetItem(self.index,2,self.dbdatpes[index][1])
				self.datpes.m_ListDataPeserta.SetItem(self.index,3,self.dbdatpes[index][2])
				self.datpes.m_ListDataPeserta.SetItem(self.index,4,self.dbdatpes[index][3])
				self.datpes.m_ListDataPeserta.SetItem(self.index,5,self.dbdatpes[index][8])
				self.datpes.m_ListDataPeserta.SetItem(self.index,6,self.dbdatpes[index][9])
				self.datpes.m_ListDataPeserta.SetItem(self.index,7,str(self.dbdatpes[index][46]))
	 			
				index+=1
		except :
			print ("pass to ")
			pass
		
		try :
			self.buka_peserta_tes.m_ListDataPeserta.DeleteAllItems()
			self.nama_orang= str(self.BukaWindowFilter.m_textCtrlnamaorang.GetValue())
			print (self.nama_orang)
			self.db_file = db.pathdb()
			self.date_from=None
			self.date_end=None
			self.database_peserta_tes = db.querydbtes(str(self.db_file), self.nama_orang, self.date_from, self.date_end)[0]
			index = 0
			print (self.database_peserta_tes)
			for self.index in range(len(self.database_peserta_tes)):
				self.index = self.buka_peserta_tes.m_ListDataPeserta.InsertItem(0,"{}".format(len(self.database_peserta_tes)-index))
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,1,self.database_peserta_tes[index][0])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,2,self.database_peserta_tes[index][1])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,3,self.database_peserta_tes[index][2])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,4,self.database_peserta_tes[index][4])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,5,self.database_peserta_tes[index][6])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,6,self.database_peserta_tes[index][7])
				self.buka_peserta_tes.m_ListDataPeserta.SetItem(self.index,7,str(self.database_peserta_tes[index][49]))
				
				index+=1
				
		except :
			print ("pass")
			pass
		pass
	
	def m_buttonKlikFilterNoTesOnButtonClick(self,events):
		from AppsSDS.db import db
		
		try:
			print ("Filtering based on No Tes")
			self.datpes.m_ListDataPeserta.DeleteAllItems()
			self.nama_orang = None
			db_file = db.pathdb()
			self.date_from=None
			self.date_end=None
			self.no_tes = str(self.BukaWindowFilter.m_textCtrlnomortes.GetValue())
			print (self.no_tes)
			self.dbdatpes = db.querydb(str(db_file), self.nama_orang, self.date_from, self.date_end,self.no_tes)[2]
			print (self.dbdatpes)
			index = 0
			for index in range(len(self.dbdatpes)):
				self.index = self.datpes.m_ListDataPeserta.InsertItem(0,"{}".format(len(self.dbdatpes)-index))
				self.datpes.m_ListDataPeserta.SetItem(self.index,1,self.dbdatpes[index][0])
				self.datpes.m_ListDataPeserta.SetItem(self.index,2,self.dbdatpes[index][1])
				self.datpes.m_ListDataPeserta.SetItem(self.index,3,self.dbdatpes[index][2])
				self.datpes.m_ListDataPeserta.SetItem(self.index,4,self.dbdatpes[index][3])
				self.datpes.m_ListDataPeserta.SetItem(self.index,5,self.dbdatpes[index][8])
				self.datpes.m_ListDataPeserta.SetItem(self.index,6,self.dbdatpes[index][9])
				self.datpes.m_ListDataPeserta.SetItem(self.index,7,str(self.dbdatpes[index][46]))
	 			
				index+=1
		except :
			pass

		
		pass	
	
######## HERE ARE THE CONTROL WIDGETS BIND IN FILTER WINDOWS
	def m_filterOnButtonClick(self,event):
		print ("click to filter on Line 701")
		import datetime
		from AppsSDS.sds import WindowsOpenFilter
		
		self.BukaWindowFilter=WindowsOpenFilter(self)
		# Connect Events
		self.curr_month = datetime.datetime.now().month
		self.curr_day = datetime.datetime.now().day
		self.curr_year = datetime.datetime.now().year

		print (datetime.datetime.now().month)
		
		displayDatefrom = wx.DateTime.FromDMY(int(1), int(self.curr_month) , int(self.curr_year))
		displayDateuntil = wx.DateTime.FromDMY(int(31), int(self.curr_month), int(self.curr_year))
		print (displayDatefrom)
		self.BukaWindowFilter.m_datePickerdaritgl.SetValue(displayDatefrom)
		self.BukaWindowFilter.m_datePickersampaitgl.SetValue(displayDateuntil)

		self.BukaWindowFilter.m_buttonFilterBatal.Bind(wx.EVT_BUTTON, self.m_buttonFilterBatalOnButtonClick )
		self.BukaWindowFilter.m_buttonKlikFilterTanggal.Bind( wx.EVT_BUTTON, self.m_buttonKlikFilterTanggalOnButtonClick )
		self.BukaWindowFilter.m_buttonKlikFilterOrang.Bind( wx.EVT_BUTTON, self.m_buttonKlikFilterOrangOnButtonClick )
		self.BukaWindowFilter.m_buttonKlikFilterNoTes.Bind( wx.EVT_BUTTON, self.m_buttonKlikFilterNoTesOnButtonClick )
		
		self.BukaWindowFilter.Show()
		
		pass
	
	def m_buttonBersihkanOnButtonClick(self,event):
		from AppsSDS.clear_data import ClearData
		self.clear = ClearData(self)

		pass
	
	def m_SimpanPage6OnButtonClick(self,event):
# 		"Tombol Simpan seluruh data yang sudah dimasukkan ke dalam database"
		self.simpan = SimpanData(self)
		self.simpan.simpan_data()

# 		print ("ini yang terakhir di proses {}".format(self.cek_rowid))
		pass
	
	def btn_selanjutnya(self, event):

		if self.halaman1.IsShown():
# 			print ('halaman2')
			from AppsSDS import Halaman2
			self.bukahalaman2 = Halaman2(self)

		elif self.halaman2.IsShown() :
# 			print ("halaman3")
			from AppsSDS import Halaman3
			self.bukahalaman3 = Halaman3(self)
		
		elif self.halaman3.IsShown():
# 			print("halaman4")
			from AppsSDS import Halaman4
			self.bukahalaman4 = Halaman4(self)
		
		elif self.halaman4.IsShown():
# 			print ("halaman5")
			from AppsSDS import Halaman5
			self.bukahalaman5 = Halaman5(self)
			
		elif self.halaman5.IsShown():
# 			print ("halaman6")
			from AppsSDS.halaman import Halaman6
			self.bukahalaman6 = Halaman6(self)

		elif self.halaman6.IsShown():
# 			print ("halaman7")
			from AppsSDS.halaman import Halaman7
			self.bukahalaman7 = Halaman7(self)


		self.Refresh()
		self.Layout()

		pass
	def m_buttonDetailOnButtonClick(self,event):
		print ("You have choose Klik Detail")
		print (self.seleksi)
		if self.seleksi ==1 :
			try :
				self.item = self.datpes.m_ListDataPeserta.GetFocusedItem()
				self.item = self.datpes.m_ListDataPeserta.GetItem(self.item,3).GetText()
			except :
				self.item = None
				pass
	
			from AppsSDS.sds import RincianData
	
			from AppsSDS.db import db
			self.buka_detail=RincianData(self)
			self.buka_detail.Show()
			try :
				self.db_file = db.pathdb()
				self.nama_orang = self.item
				self.date_from = None
				self.date_end = None
				self.no_tes = None
		
				self.querydb = db.querydb(self.db_file, self.nama_orang, self.date_from, self.date_end, self.no_tes)[0][0]
			
				print (self.querydb)
			
				self.buka_detail.notes.SetValue(self.querydb[0])
				self.buka_detail.tanggal_tes.SetValue(self.querydb[1])
				self.buka_detail.nama_kandidat.SetValue(self.querydb[2])
				self.buka_detail.jenis_kelamin.SetValue(self.querydb[3])
				self.buka_detail.tanggal_lahir.SetValue(self.querydb[4])
				self.buka_detail.pendidikan_terakhir.SetValue(self.querydb[5])
				self.buka_detail.jurusan.SetValue(self.querydb[6])
				self.buka_detail.kota.SetValue(self.querydb[7])
				self.buka_detail.perusahaan_instansi.SetValue(self.querydb[8])
				self.buka_detail.posisi_jabatan.SetValue(self.querydb[9])
				
				self.buka_detail.m_buttonTutupDetail.Bind(wx.EVT_BUTTON,self.m_buttonTutupDetailOnButtonClick)
				self.buka_detail.m_buttonHapus.Bind( wx.EVT_BUTTON, self.m_buttonHapusOnButtonClick )
				
			except:
				pass
			
		elif self.seleksi==2 :
			try :
				self.item = self.buka_peserta_tes.m_ListDataPeserta.GetFocusedItem()
				self.item = self.buka_peserta_tes.m_ListDataPeserta.GetItem(self.item,1).GetText()
			except :
				self.item = None
				pass
			print (self.item)
			from AppsSDS.sds import RincianDataTes
	
			from AppsSDS.db import db
			self.buka_detail2=RincianDataTes(self)
			self.buka_detail2.Show()
			try :
				self.db_file = db.pathdb()
				self.nama_orang = self.item
				self.date_from = None
				self.date_end = None
				self.no_tes = None
		
				self.querydb = db.querydbtes(self.db_file, self.nama_orang, self.date_from, self.date_end)[0][0]
			
				print (self.querydb)
			
				self.buka_detail2.nama.SetValue(self.querydb[0])
				self.buka_detail2.tanggal_tes.SetValue(self.querydb[1])
				self.buka_detail2.jenis_kelamin.SetValue(self.querydb[2])
				self.buka_detail2.tanggal_lahir.SetValue(self.querydb[3])
				self.buka_detail2.asal_sekolah.SetValue(self.querydb[4])
				self.buka_detail2.jurusan.SetValue(self.querydb[5])
				self.buka_detail2.asal_universitas.SetValue(self.querydb[6])
				self.buka_detail2.jurusan2.SetValue(self.querydb[7])
				self.buka_detail2.kota.SetValue(self.querydb[8])
				self.buka_detail2.hobi.SetValue(self.querydb[9])
				self.buka_detail2.prestasi_akademik.SetValue(self.querydb[10])
				self.buka_detail2.prestasi_non_akademik.SetValue(self.querydb[11])
				self.buka_detail2.ekskul_yang_diikuti.SetValue(self.querydb[12])

				
				self.buka_detail2.m_buttonTutupDetail.Bind(wx.EVT_BUTTON,self.m_buttonTutupDetailOnButtonClick)
				self.buka_detail2.m_buttonHapus.Bind( wx.EVT_BUTTON, self.m_buttonHapusOnButtonClick )
				print ("look over here")
				
			except:
				pass
		
		pass

	def m_buttonTutupDetailOnButtonClick(self,event):
		try :
			self.buka_detail.Close()
		except :
			self.buka_detail2.Close()
		pass
	
	def cek_rowiddata(self):
		print ("check row id here")
		try :
			self.cek_rowid
		except:
			self.cek_rowid=""
			pass
		return self.cek_rowid
	
	def m_buttonLihatNilaiOnButtonClick(self,event):
		print ("This klik will execute and import data from AppsSDS.lihat_nilai import LihatNilai")
		from AppsSDS.lihat_nilai import LihatNilai
		if self.seleksi ==1 :
			self.m_radioBtn1.SetValue(True)
			self.btnradio_formtes(self)
			self.buka=LihatNilai(self)
			self.buka.insert_value()
			self.cek_rowid= self.buka.cek_rowid()
			self.cek_rowiddata()
			self.m_buttonTutupDetailOnButtonClick(self)
			self.BukaWindowFilter.Close()
			self.datpes.Close()
		elif self.seleksi ==2 :
			self.m_radioBtn2.SetValue(True)
			self.btnradio_formseleksi(self)
			self.bukates=LihatNilaiTes(self)
			self.bukates.insert_value()
			self.cek_rowid= self.bukates.cek_rowidtes()
			self.cek_rowiddata()
			self.m_buttonTutupDetailOnButtonClick(self)
			self.BukaWindowFilter.Close()
			self.buka_peserta_tes.Close()			
			
	
		pass
	
	def m_ListDataPesertaOnListItemSelected(self,event):
		print ("item selected")
# 		print (event.GetItem())
# 		print (self.datpes.m_ListDataPeserta.GetColumn(1).GetText())
		try:
			self.item = self.datpes.m_ListDataPeserta.GetFocusedItem()
			self.item = self.datpes.m_ListDataPeserta.GetItem(self.item,3).GetText()
			print (self.item)
		# 		print (self.datpes.m_ListDataPeserta.GetItem(2).GetText())
		except :
			pass
		pass
	
	def m_DataPesertaSeleksiOnMenuSelection(self, event):
		from AppsSDS import DataPesertaSeleksi

		self.datpes = DataPesertaSeleksi(self)
		# self.datpes.SetWindowStyleFlag(wx.DEFAULT_FRAME_STYLE)

		self.datpes.m_filter.Bind( wx.EVT_BUTTON, self.m_filterOnButtonClick )
		# self.datpes.m_ListDataPeserta.SetWindowStyleFlag(wx.LC_REPORT|wx.DEFAULT_FRAME_STYLE)
		self.datpes.m_ListDataPeserta.Bind( wx.EVT_LIST_ITEM_SELECTED, self.m_ListDataPesertaOnListItemSelected )
		self.datpes.m_buttonDetail.Bind( wx.EVT_BUTTON, self.m_buttonDetailOnButtonClick )
		self.datpes.m_buttonLihatNilai.Bind( wx.EVT_BUTTON, self.m_buttonLihatNilaiOnButtonClick )

		self.datpes.m_buttonLihatDataBulanIni.Bind( wx.EVT_BUTTON, self.m_buttonLihatDataBulanIniOnButtonClick )
		self.datpes.Show()
		self.seleksi = 1
		print ("hello")
		pass
	
	def m_DataPesertaTesOnMenuSelection(self,event):
		from AppsSDS import DataPesertaTes
		self.buka_peserta_tes = DataPesertaTes(self)
		# self.buka_peserta_tes.SetWindowStyleFlag(wx.DEFAULT_FRAME_STYLE)
		self.buka_peserta_tes.m_filter.Bind( wx.EVT_BUTTON, self.m_filterOnButtonClick )
		# self.buka_peserta_tes.m_ListDataPeserta.SetWindowStyleFlag(wx.LC_REPORT|wx.DEFAULT_FRAME_STYLE)
		self.buka_peserta_tes.m_ListDataPeserta.Bind( wx.EVT_LIST_ITEM_SELECTED, self.m_ListDataPesertaOnListItemSelected )
		self.buka_peserta_tes.m_buttonDetail.Bind( wx.EVT_BUTTON, self.m_buttonDetailOnButtonClick )
		self.buka_peserta_tes.m_buttonLihatNilai.Bind( wx.EVT_BUTTON, self.m_buttonLihatNilaiOnButtonClick )

		self.buka_peserta_tes.m_buttonLihatDataBulanIni.Bind( wx.EVT_BUTTON, self.m_buttonLihatDataBulanIniOnButtonClick )
		self.seleksi = 2
		self.buka_peserta_tes.Show()
		print ("hello")	
		pass

	def m_buttonHapusOnButtonClick(self,event):
		print ("this is to delete the data") 
		try :
			self.row_id = self.datpes.m_ListDataPeserta.GetFocusedItem()
			self.row_id = self.datpes.m_ListDataPeserta.GetItem(self.row_id,7).GetText()
			print (self.row_id)
	# 		self.buka_detail.Close()
			self.datpes.m_ListDataPeserta.DeleteItem(self.datpes.m_ListDataPeserta.GetFocusedItem())

			from AppsSDS.db.db import Deletedb,pathdb
			self.db_file = pathdb()
			self.Delete = Deletedb(self.db_file, self.row_id)
	
	# 		self.datpes.Close()
		except :
			pass
		
		try :
			self.row_id = self.buka_peserta_tes.m_ListDataPeserta.GetFocusedItem()
			self.row_id = self.buka_peserta_tes.m_ListDataPeserta.GetItem(self.row_id,7).GetText()
			print (self.row_id)
	# 		self.buka_detail.Close()
			self.buka_peserta_tes.m_ListDataPeserta.DeleteItem(self.buka_peserta_tes.m_ListDataPeserta.GetFocusedItem())
	
			from AppsSDS.db.db import Deletedbtes,pathdb
			self.db_file = pathdb()
			self.Delete = Deletedbtes(self.db_file, self.row_id)
	
	# 		self.buka_peserta_tes.Close()
			
		except :
			pass
		pass
	
	def m_btn_tutupaplikasi(self, event):
		import AppsSDS as msgdlg
		self.getid = msgdlg.MessBx(None, "", style=wx.OK | wx.CANCEL)
		val = self.getid.getiddestroy()
		if val == wx.ID_OK:
			print ("Aplikasi seluruhnya di Close")
			self.Close()
			
		elif val == wx.ID_CANCEL:
			# """Membatalkan cancel"""
			print ("Batal tutup aplikasi seluruhnya")
			pass

	def WindowUtamaOnClose(self,event):
		import sys
		sys.exit()	

	def m_btn_bukadatabase(self,event):
		from AppsSDS import KonfigDatabase as BukaJendelaDatabase
	
		self.bukaDb = BukaJendelaDatabase(self)
		self.bukaDb.Show()
		pass

	def btn_balik(self, event):
		
		if self.halaman2.IsShown():
			from AppsSDS import Halaman1m
			self.bukahalaman1 = Halaman1m(self)
	
		elif self.halaman3.IsShown() :
			from AppsSDS import Halaman2m
			self.bukahalaman2 =Halaman2m(self)
				
		elif self.halaman4.IsShown():
			from AppsSDS import Halaman3m
			self.bukahalaman3 = Halaman3m(self)

			
		elif self.halaman5.IsShown():
			from AppsSDS import Halaman4m
			self.bukahalaman4=Halaman4m(self)
			
		elif self.halaman6.IsShown():
			from AppsSDS import Halaman5m
			self.bukahalaman5=Halaman5m(self)

		elif self.halaman7.IsShown():
			from AppsSDS import Halaman6m
			self.bukahalaman6=Halaman6m(self)
		

		self.Refresh()
		self.Layout()
		
		pass
	
	def m_btn_ttgaplikasi(self, event):
		from AppsSDS import TentangAplikasi
		self.bukaTtgApl = TentangAplikasi(self)
		self.bukaTtgApl.Show()
		pass
	
	def btnradio_formseleksi(self, event):
		print ("hello")
		self.m_panel7.Hide()
		self.m_panel8.Show()
		self.Layout()
		pass
		
	def btnradio_formtes(self, event):
		print ("I am over here")
		self.m_panel7.Show()
		self.m_panel8.Hide()
		self.Layout()
		pass

	def m_buttonDetailAOnButtonClick(self,event):
		print ("result Aktivities")
		
		self.listA = {'R':self.nilai_RealisticA,\
					 'I':self.nilai_InvestigativeA,\
					 'A':self.nilai_ArtisticA,\
					 'S':self.nilai_SocialA,\
					 'E':self.nilai_EnterprisingA,\
					 'C':self.nilai_ConventionalA
					 }
		self.sum = 0
		for key,values in self.listA.items():
			self.sum += values
			print (self.sum)
			
		
		from AppsSDS.controller.sequence import CalculationRIASEC
		self.CalculationA = CalculationRIASEC(**self.listA)
		print (self.CalculationA.SortRIASEC())
		self.itter = "".join(self.CalculationA.SortRIASEC().keys())
		from AppsSDS.controller.permutation import CustomPermutation
		self.permut = CustomPermutation(self.itter)
		self.listpermut = self.permut.readpermutation()[0]	
			
		print (self.listpermut[0])
		print (self.listpermut[1])
		
		
		
		from AppsSDS.dPageAresult import dPageAresult
		self.buka = dPageAresult(self)
		self.buka.m_panelA.Show()
		self.buka.Show()
		
		
		self.Refresh()
		self.Layout()
		pass
	
	def m_buttonDetailKOnButtonClick(self,event):
		print ("result Kompetensi")						
	
		self.listA = {'R':self.nilai_RealisticK,\
					  'I':self.nilai_InvestigativeK,\
					  'A':self.nilai_ArtisticK,\
					  'S':self.nilai_SocialK,\
					  'E':self.nilai_EnterprisingK,\
					  'C':self.nilai_ConventionalK
					 }

		self.sum = 0
		for key,values in self.listA.items():
			self.sum += values
			print (self.sum)

		
		from AppsSDS.controller.sequence import CalculationRIASEC
		self.CalculationA = CalculationRIASEC(**self.listA)
		print (self.CalculationA.SortRIASEC())
		self.itter = "".join(self.CalculationA.SortRIASEC().keys())
		from AppsSDS.controller.permutation import CustomPermutation
		self.permut = CustomPermutation(self.itter)
		self.listpermut = self.permut.readpermutation()[0]	
			

		from AppsSDS.dPageAresult import dPageBresult
		self.buka = dPageBresult(self)
		self.buka.m_panelA.Show()
		self.buka.Show()
		
		
		self.Refresh()
		self.Layout()
		pass
	
	def m_buttonDetailPOnButtonClick(self,event):
		print ("result Pekerjaan")
								
		self.listA = {'R':self.nilai_RealisticP,\
					  'I':self.nilai_InvestigativeP,\
					  'A':self.nilai_ArtisticP,\
					  'S':self.nilai_SocialP,\
					  'E':self.nilai_EnterprisingP,\
					  'C':self.nilai_ConventionalP
					 }
		
		self.sum = 0
		for key,values in self.listA.items():
			self.sum += values
			print (self.sum)
		

		from AppsSDS.controller.sequence import CalculationRIASEC
		self.CalculationA = CalculationRIASEC(**self.listA)
		print (self.CalculationA.SortRIASEC())
		self.itter = "".join(self.CalculationA.SortRIASEC().keys())
		from AppsSDS.controller.permutation import CustomPermutation
		self.permut = CustomPermutation(self.itter)
		self.listpermut = self.permut.readpermutation()[0]	
			

		from AppsSDS.dPageAresult import dPageCresult
		self.buka = dPageCresult(self)
		self.buka.m_panelA.Show()
		self.buka.Show()
		
		
		self.Refresh()
		self.Layout()
		pass
		pass
	
	def m_buttonDetailPD1OnButtonClick(self,event):
		print ("result Penilaian Diri1")	
							
		self.listA = {'R':self.nilai_Kmekanisb1,\
					  'I':self.nilai_Kilmiahb1,\
					  'A':self.nilai_Kartistikb1,\
					  'S':self.nilai_Kmengajarb1,\
					  'E':self.nilai_Kpenjualan,\
					  'C':self.nilai_Kadministrasib1
					 }
		
		self.sum = 0
		for key,values in self.listA.items():
			self.sum += values
			print (self.sum)

		
		from AppsSDS.controller.sequence import CalculationRIASEC
		self.CalculationA = CalculationRIASEC(**self.listA)
		print (self.CalculationA.SortRIASEC())
		self.itter = "".join(self.CalculationA.SortRIASEC().keys())
		from AppsSDS.controller.permutation import CustomPermutation
		self.permut = CustomPermutation(self.itter)
		self.listpermut = self.permut.readpermutation()[0]	
			

		from AppsSDS.dPageAresult import dPageDresult
		self.buka = dPageDresult(self)
		self.buka.m_panelA.Show()
		self.buka.Show()
		
		
		self.Refresh()
		self.Layout()
		
		pass
	
	def m_buttonDetailPD2OnButtonClick(self,event):
		print ("result Penilaian Diri2")	
							
		self.listA = {'R':self.nilai_Ktanganb2,\
					  'I':self.nilai_Kmatematikab2,\
					  'A':self.nilai_Kmusikb2,\
					  'S':self.nilai_Moranglain,\
					  'E':self.nilai_Kmanajerial,\
					  'C':self.nilai_Kperkantoran
					 }

		self.sum = 0
		for key,values in self.listA.items():
			self.sum += values
			print (self.sum)

		
		from AppsSDS.controller.sequence import CalculationRIASEC
		self.CalculationA = CalculationRIASEC(**self.listA)
		print (self.CalculationA.SortRIASEC())
		self.itter = "".join(self.CalculationA.SortRIASEC().keys())
		from AppsSDS.controller.permutation import CustomPermutation
		self.permut = CustomPermutation(self.itter)
		self.listpermut = self.permut.readpermutation()[0]	
			

		from AppsSDS.dPageAresult import dPageEresult
		self.buka = dPageEresult(self)
		self.buka.m_panelA.Show()
		self.buka.Show()
		
		
		self.Refresh()
		self.Layout()
		pass		
		pass
 	
 	